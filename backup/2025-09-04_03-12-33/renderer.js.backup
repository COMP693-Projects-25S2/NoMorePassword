let tabs = {};
let currentTabId = null;
let pendingTitles = {};

const tabsContainer = document.getElementById('tabs');
const addressBar = document.getElementById('address');



function createTab(url = 'https://www.google.com') {
    window.electronAPI.createTab(url).then(({ id, title }) => {
        const tabEl = document.createElement('div');
        tabEl.className = 'tab';
        tabEl.dataset.id = id;

        const titleNode = document.createElement('span');
        titleNode.className = 'title';
        titleNode.textContent = title;

        const closeBtn = document.createElement('span');
        closeBtn.className = 'close';
        closeBtn.textContent = '×';
        closeBtn.onclick = (e) => {
            e.stopPropagation();
            closeTab(id);
        };

        tabEl.appendChild(titleNode);
        tabEl.appendChild(closeBtn);
        tabsContainer.appendChild(tabEl);

        tabEl.onclick = () => switchTab(id);

        tabs[id] = { el: tabEl, title, titleNode, closeBtn };

        if (pendingTitles[id]) {
            titleNode.textContent = pendingTitles[id];
            delete pendingTitles[id];
        }

        currentTabId = id;
        activateTab(id);
        updateAddressFromTab(id);
    });
}

// 新增：创建历史记录标签页
function createHistoryTab() {
    window.electronAPI.createHistoryTab().then(({ id, title }) => {
        const tabEl = document.createElement('div');
        tabEl.className = 'tab history-tab'; // 添加特殊样式类
        tabEl.dataset.id = id;

        const titleNode = document.createElement('span');
        titleNode.className = 'title';
        titleNode.textContent = title;

        const closeBtn = document.createElement('span');
        closeBtn.className = 'close';
        closeBtn.textContent = '×';
        closeBtn.onclick = (e) => {
            e.stopPropagation();
            closeTab(id);
        };

        tabEl.appendChild(titleNode);
        tabEl.appendChild(closeBtn);
        tabsContainer.appendChild(tabEl);

        tabEl.onclick = () => switchTab(id);

        tabs[id] = { el: tabEl, title, titleNode, closeBtn, isHistory: true };

        currentTabId = id;
        activateTab(id);

        // 历史标签页不需要地址栏更新
        addressBar.value = 'browser://history';
    });
}

// Switch to a specific tab
function switchToTab(tabId) {
    if (currentTabId === tabId) return;

    // Hide current webview
    if (currentTabId && tabs[currentTabId] && tabs[currentTabId].webview) {
        tabs[currentTabId].webview.style.display = 'none';
    }

    // Show new webview
    if (tabs[tabId] && tabs[tabId].webview) {
        tabs[tabId].webview.style.display = 'block';
        tabs[tabId].webview.classList.add('active');
    }

    // Update tab states
    if (currentTabId && tabs[currentTabId]) {
        tabs[currentTabId].el.classList.remove('active');
    }
    if (tabs[tabId]) {
        tabs[tabId].el.classList.add('active');
    }

    currentTabId = tabId;
    updateAddressFromTab(tabId);
    console.log(`✅ Switched to tab ${tabId}`);
}

function activateTab(id) {
    Object.entries(tabs).forEach(([tid, obj]) => {
        obj.el.classList.toggle('active', parseInt(tid) === id);
    });
}

function closeTab(id) {
    window.electronAPI.closeTab(id).then((newActiveId) => {
        tabs[id]?.el.remove();
        delete tabs[id];
        if (newActiveId) {
            activateTab(newActiveId);
            currentTabId = newActiveId;

            // 检查新活动标签页的类型
            if (tabs[newActiveId] && tabs[newActiveId].isHistory) {
                addressBar.value = 'browser://history';
            } else {
                updateAddressFromTab(newActiveId);
            }
        } else {
            currentTabId = null;
            addressBar.value = '';
        }
    });
}

function updateAddressFromTab(id) {
    setTimeout(() => {
        window.electronAPI.getTabInfo(id).then(info => {
            if (!info) return;
            if (info.url) addressBar.value = info.url;
            if (info.title && tabs[id]) {
                tabs[id].title = info.title;
                tabs[id].titleNode.textContent = info.title;
                if (id === currentTabId) document.title = info.title;
            }
        });
    }, 100);
}

// 修改后的历史显示函数 - 现在创建新标签页而不是弹框
async function showVisitHistory() {
    try {
        createHistoryTab();
    } catch (error) {
        console.error('Failed to create history tab:', error);
        alert('Failed to create history tab');
    }
}







// Setup all event listeners and initialization
document.addEventListener('DOMContentLoaded', () => {
    console.log('Setting up all event listeners and initialization...');

    // 绑定按钮事件
    document.getElementById('new-tab').onclick = () => createTab();
    document.getElementById('back').onclick = () => window.electronAPI.goBack();
    document.getElementById('forward').onclick = () => window.electronAPI.goForward();
    document.getElementById('refresh').onclick = () => window.electronAPI.refresh();

    // 历史按钮事件 - 现在创建新标签页
    document.getElementById('history').onclick = showVisitHistory;

    // Config button and dropdown events
    const configBtn = document.getElementById('config-btn');
    const configDropdown = document.getElementById('config-dropdown-content');

    // Toggle dropdown on config button click
    configBtn.onclick = (e) => {
        e.stopPropagation();
        const isVisible = configDropdown.classList.contains('show');

        if (!isVisible) {
            // Calculate position for fixed positioning
            const buttonRect = configBtn.getBoundingClientRect();
            const dropdown = configDropdown;

            // Get viewport dimensions
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;

            // Force dropdown to be visible to get accurate dimensions
            dropdown.style.visibility = 'hidden';
            dropdown.style.display = 'block';
            dropdown.style.position = 'fixed';
            dropdown.style.top = '-9999px';
            dropdown.style.left = '-9999px';

            // Get accurate dropdown dimensions
            const dropdownWidth = dropdown.offsetWidth;
            const dropdownHeight = dropdown.offsetHeight;

            // Calculate optimal position
            let top = buttonRect.bottom + 5;
            let left = buttonRect.left;

            // Ensure dropdown doesn't go below viewport
            if (top + dropdownHeight > viewportHeight) {
                top = buttonRect.top - dropdownHeight - 5;
            }

            // Ensure dropdown doesn't go right of viewport
            if (left + dropdownWidth > viewportWidth) {
                left = viewportWidth - dropdownWidth - 10;
            }

            // Ensure dropdown doesn't go left of viewport
            if (left < 10) {
                left = 10;
            }

            // Apply final positioning
            dropdown.style.top = top + 'px';
            dropdown.style.left = left + 'px';
            dropdown.style.visibility = 'visible';

            // Debug info
            console.log('Dropdown positioning:', {
                buttonRect: buttonRect,
                dropdownWidth: dropdownWidth,
                dropdownHeight: dropdownHeight,
                viewportWidth: viewportWidth,
                viewportHeight: viewportHeight,
                calculatedTop: top,
                calculatedLeft: left,
                finalPosition: dropdown.style.position
            });

            // Verify dropdown is visible
            setTimeout(() => {
                const finalRect = dropdown.getBoundingClientRect();
                console.log('Final dropdown position:', {
                    top: finalRect.top,
                    left: finalRect.left,
                    bottom: finalRect.bottom,
                    right: finalRect.right,
                    width: finalRect.width,
                    height: finalRect.height
                });

                // Check if dropdown is fully visible
                const isFullyVisible =
                    finalRect.top >= 0 &&
                    finalRect.left >= 0 &&
                    finalRect.bottom <= viewportHeight &&
                    finalRect.right <= viewportWidth;

                console.log('Dropdown fully visible:', isFullyVisible);

                if (!isFullyVisible) {
                    console.warn('Dropdown not fully visible, adjusting position...');
                    // Force dropdown to be visible at a safe position
                    dropdown.style.zIndex = '2147483647';
                    dropdown.style.position = 'fixed';
                    dropdown.style.top = '100px';
                    dropdown.style.left = '100px';
                    dropdown.style.background = '#ffff00';
                    dropdown.style.border = '3px solid #00ff00';
                }
            }, 100);
        }

        configDropdown.classList.toggle('show');
    };

    // Close dropdown when clicking outside
    document.addEventListener('click', () => {
        configDropdown.classList.remove('show');
    });

    // Prevent dropdown from closing when clicking inside it
    configDropdown.onclick = (e) => {
        e.stopPropagation();
    };

    // Clear local users option
    document.getElementById('clear-local-users').onclick = async () => {
        configDropdown.classList.remove('show');
        try {
            const result = await window.electronAPI.clearLocalUsers();
            if (result.success) {
                showNotification('success', `Successfully cleared ${result.changes} users from local_users table`);
            } else {
                showNotification('error', `Failed to clear local_users table: ${result.error}`);
            }
        } catch (error) {
            showNotification('error', `Error clearing local_users table: ${error.message}`);
        }
    };

    // Exit app option
    document.getElementById('exit-app').onclick = async () => {
        configDropdown.classList.remove('show');
        try {
            await window.electronAPI.exitApp();
        } catch (error) {
            showNotification('error', `Error exiting application: ${error.message}`);
        }
    };

    // Test dropdown button - using addEventListener for better compatibility
    const testBtn = document.getElementById('test-dropdown');
    if (testBtn) {
        testBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            console.log('🧪 Test button clicked! (addEventListener)');

            // Force show dropdown at a known position
            configDropdown.style.position = 'fixed';
            configDropdown.style.top = '100px';
            configDropdown.style.left = '100px';
            configDropdown.style.zIndex = '2147483647';
            configDropdown.style.background = '#ff0000';
            configDropdown.style.border = '5px solid yellow';
            configDropdown.style.display = 'block';
            configDropdown.style.visibility = 'visible';

            configDropdown.classList.add('show');

            console.log('✅ Test dropdown shown at forced position');
            console.log('Dropdown element:', configDropdown);
            console.log('Dropdown styles:', {
                position: configDropdown.style.position,
                top: configDropdown.style.top,
                left: configDropdown.style.left,
                zIndex: configDropdown.style.zIndex,
                display: configDropdown.style.display,
                visibility: configDropdown.style.visibility
            });

            // Force a repaint
            configDropdown.offsetHeight;
        });
        console.log('✅ Test button event listener attached (addEventListener)');
    } else {
        console.error('❌ Test button not found!');
    }

    // Simple test button - as a backup
    const simpleTestBtn = document.getElementById('simple-test');
    if (simpleTestBtn) {
        simpleTestBtn.onclick = (e) => {
            e.stopPropagation();
            console.log('🔧 Simple test button clicked!');
            alert('Simple test button works!');
        };
        console.log('Simple test button event listener attached');
    } else {
        console.error('Simple test button not found!');
    }

    // Dropdown test button - specifically for testing dropdown visibility
    const dropdownTestBtn = document.getElementById('dropdown-test');
    if (dropdownTestBtn) {
        dropdownTestBtn.onclick = (e) => {
            e.stopPropagation();
            console.log('🟣 Dropdown test button clicked!');

            // 显示独立的测试下拉框
            const testDropdown = document.getElementById('test-dropdown-content');
            if (testDropdown) {
                testDropdown.classList.add('show');
                console.log('✅ Independent test dropdown shown');
                console.log('Test dropdown element:', testDropdown);
                console.log('Test dropdown styles:', {
                    position: testDropdown.style.position,
                    top: testDropdown.style.top,
                    left: testDropdown.style.left,
                    zIndex: testDropdown.style.zIndex,
                    display: testDropdown.style.display,
                    visibility: testDropdown.style.visibility
                });
            } else {
                console.error('❌ Test dropdown not found!');
            }
        };
        console.log('🟣 Dropdown test button event listener attached');
    } else {
        console.error('❌ Dropdown test button not found!');
    }


    addressBar.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            const url = addressBar.value.trim();

            // 检查是否是特殊的浏览器协议
            if (url === 'browser://history' || url === 'history://') {
                createHistoryTab();
                return;
            }

            const validUrl = url.startsWith('http') ? url : `https://${url}`;
            createTab(validUrl);
        }
    });

    // IPC 事件监听 - 使用预加载脚本暴露的API
    window.electronAPI.onTabTitleUpdated((_, { id, title }) => {
        if (tabs[id]) {
            tabs[id].title = title;
            if (tabs[id].titleNode) {
                tabs[id].titleNode.textContent = title;
            }
        } else {
            pendingTitles[id] = title;
        }

        if (id === currentTabId) {
            document.title = title;
        }
    });



    // Init tab event listener - create initial tab when main process is ready
    window.electronAPI.onInitTab(() => {
        console.log('Received init-tab event from main process');
        console.log('Creating initial tab...');
        createTab('https://www.google.com');
    });

    // 监听自动创建的标签页
    window.electronAPI.onAutoTabCreated((_, { id, title, url }) => {
        console.log('检测到自动创建的标签页:', { id, title, url });

        // 创建标签页元素
        const tabEl = document.createElement('div');
        tabEl.className = 'tab';
        tabEl.dataset.id = id;

        const titleNode = document.createElement('span');
        titleNode.className = 'title';
        titleNode.textContent = title;

        const closeBtn = document.createElement('span');
        closeBtn.className = 'close';
        closeBtn.textContent = '×';
        closeBtn.onclick = (e) => {
            e.stopPropagation();
            closeTab(id);
        };

        tabEl.appendChild(titleNode);
        tabEl.appendChild(closeBtn);
        tabsContainer.appendChild(tabEl);

        tabEl.onclick = () => switchTab(id);

        tabs[id] = { el: tabEl, title, titleNode, closeBtn };

        // 激活新标签页
        currentTabId = id;
        activateTab(id);
        updateAddressFromTab(id);

        console.log('✅ 自动创建的标签页已添加到界面');
    });

    // 启动时创建第一个标签页 - 等待init-tab事件
    // 不在这里直接调用createTab，等待主进程的init-tab事件
    console.log('Waiting for init-tab event from main process...');



    // Add notification system
    window.electronAPI.onShowNotification((_, notification) => {
        showNotification(notification.type, notification.message);
    });

    console.log('All event listeners and initialization completed');

    // Test if event listeners are working
    console.log('🧪 Testing event listeners...');

    // Test config button
    const testConfigBtn = document.getElementById('config-btn');
    if (testConfigBtn) {
        console.log('✅ Config button found for testing');
        // Try to manually trigger a click
        setTimeout(() => {
            console.log('🎯 Manually testing config button...');
            testConfigBtn.click();
        }, 2000);
    } else {
        console.error('❌ Config button not found for testing');
    }

    // Test test button
    const testTestBtn = document.getElementById('test-dropdown');
    if (testTestBtn) {
        console.log('✅ Test button found for testing');
        // Try to manually trigger a click
        setTimeout(() => {
            console.log('🎯 Manually testing test button...');
            testTestBtn.click();
        }, 2500);
    } else {
        console.error('❌ Test button not found for testing');
    }
});

// Notification system
function showNotification(type, message) {
    // Remove existing notification if any
    const existingNotification = document.querySelector('.notification');
    if (existingNotification) {
        existingNotification.remove();
    }

    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;

    // Add styles
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 20px;
        border-radius: 6px;
        color: white;
        font-weight: 600;
        z-index: 10000;
        max-width: 300px;
        word-wrap: break-word;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
    `;

    // Set background color based on type
    if (type === 'success') {
        notification.style.background = '#4CAF50';
    } else if (type === 'error') {
        notification.style.background = '#f44336';
    } else {
        notification.style.background = '#2196F3';
    }

    // Add to page
    document.body.appendChild(notification);

    // Auto-remove after 5 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }
    }, 5000);

    // Allow manual close on click
    notification.onclick = () => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 300);
    };
}

// Global test function - can be called from console
window.testDropdown = function () {
    console.log('Testing dropdown from global function...');

    const dropdown = document.getElementById('config-dropdown-content');
    if (dropdown) {
        // Force show dropdown at a known position
        dropdown.style.position = 'fixed';
        dropdown.style.top = '100px';
        dropdown.style.left = '100px';
        dropdown.style.zIndex = '2147483647';
        dropdown.style.background = '#ff0000';
        dropdown.style.border = '5px solid yellow';
        dropdown.style.display = 'block';
        dropdown.style.visibility = 'visible';

        dropdown.classList.add('show');

        console.log('Dropdown forced to show at position (100, 100)');
        console.log('Dropdown element:', dropdown);
        console.log('Dropdown styles:', {
            position: dropdown.style.position,
            top: dropdown.style.top,
            left: dropdown.style.left,
            zIndex: dropdown.style.zIndex,
            display: dropdown.style.display,
            visibility: dropdown.style.visibility
        });

        return true;
    } else {
        console.error('Dropdown element not found!');
        return false;
    }
};

console.log('Global test function available: window.testDropdown()');

